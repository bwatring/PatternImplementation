
/** CHANGE: eddited pseudo code to represent model- view - controller software architectural pattern becuase it was not prior, mvc divides the related program logic into three interconnected elements  **/

// get registration information from the user
//the view should not send to the model - should not update the model from the view 


//the controller process the user requests 
//based on the user request, the controller calls methods in the view and model to accomplish the requested action 

class UserController {
  private $user;

  public function __construct($username, $password) {
    $this->user = new User($username, $password);
    
    
    
  }

  public function register() {
    $username = $this->user->getUsername();
    $pw1 = $this->user->getPassword();
    $pw2 = $this->user->getPassword();

    if ($pw1 != $pw2 || !$this->validatePassword($pw1) || !$this->validateUsername($username)) {
      return $this->redirectBack(400);
    }
    

    $pwHash = $this->hashPassword($pw1);

    $db = $this->getDatabase();
    $table = "users";

    $success = $db->query("INSERT INTO $table (username, password)
      VALUES ($username, $pwHash);");

    if (!$success) {
      return $this->redirectBack(500);
    }

    return $this->renderView();
  }

  private function validatePassword($password) {
    if ( $password == $_POST['password2']{ 
    return true;
  }
  }

  private function validateUsername($username) {
     if($username == $_POST['username']) {
    return true;
  }
  }

  private function hashPassword($password) {
    $pwHash = hash($pw1);
    return $password;
  }

  private function getDatabase() {
    $db = getDatabase('myHost', 'mypassword', 'myDb');
    $table = "users";
    return new Database('myHost', 'myPassword', 'myDb');
  }

  private function redirectBack($code) {
    if ($pw1 != $pw2 || !valid($pw1) || !valid($username))
    return redirectBack(400);

    return $code;
  }

  private function renderView() {
    $title = "<title>Welcome " . $this->user->getUsername() . "</title>";
    $h1Style = ($this->getCurrentSeason() == 'summer') ? '<h1 style="color: RED">' : '<h1 style="color: BLUE">';
    $view = "<html>
    $title = "<title>Welcome $username</title>";
 echo "<html>
            <head>
                $title
            </head>
            <body>
                $h1Style
                    Welcome $username
                </h1>
            </body>
        </html>";

    return $view;
  }

  private function getCurrentSeason() {
    // set up opening tag 
if(getCurrentSeason() == 'summer');
    $h1Style = '<h1 style="color: RED">';
else
    $h1Style = '<h1 style="color: BLUE">';



    return 'summer';
  }
}







$username = $_POST['username'];
$pw1 = $_POST['password1'];
$pw2 = $_POST['password2'];

// validate 
if ($pw1 != $pw2 || !valid($pw1) || !valid($username))
    return redirectBack(400);

// hash password
$pwHash = hash($pw1);

$title = "<title>Welcome $username</title>";

// initialize database
$db = getDatabase('myHost', 'mypassword', 'myDb');
$table = "users";

// create user
$success = $db->query("INSERT INTO $table (username, password) 
    VALUES ($username, $pwHash);");

if(!$success)
    return redirectBack(500);

// set up opening tag 
if(getCurrentSeason() == 'summer');
    $h1Style = '<h1 style="color: RED">';
else
    $h1Style = '<h1 style="color: BLUE">';

echo "<html>
            <head>
                $title
            </head>
            <body>
                $h1Style
                    Welcome $username
                </h1>
            </body>
        </html>";
